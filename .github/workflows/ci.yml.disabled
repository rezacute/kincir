name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, v02-* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality and formatting checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            coverage: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run unit tests
      run: cargo test --lib --verbose
    
    - name: Run integration tests
      run: cargo test --test comprehensive_integration_tests --verbose
    
    - name: Run all tests
      run: cargo test --verbose
    
    - name: Install cargo-tarpaulin (coverage)
      if: matrix.coverage
      run: cargo install cargo-tarpaulin
    
    - name: Generate code coverage
      if: matrix.coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
    
    - name: Upload coverage to Codecov
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml
        fail_ci_if_error: false

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --bench backend_comparison -- --output-format html
    
    - name: Store benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/
        retention-days: 30

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
    
    - name: Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1

  # Cross-platform testing
  cross-platform:
    name: Cross Platform
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --lib --verbose

  # Integration tests with external services
  integration-services:
    name: Integration with External Services
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[integration]')
    
    services:
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
      
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
      
      mosquitto:
        image: eclipse-mosquitto:latest
        ports:
          - 1883:1883
          - 9001:9001
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-integration-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for services
      run: |
        # Wait for RabbitMQ
        timeout 60 bash -c 'until curl -f http://localhost:15672; do sleep 2; done'
        # Wait for Kafka (simple check)
        sleep 30
        # Wait for MQTT
        timeout 30 bash -c 'until nc -z localhost 1883; do sleep 2; done'
    
    - name: Run RabbitMQ integration tests
      run: cargo test rabbitmq_ack_tests --test '*' -- --nocapture
      env:
        RABBITMQ_URL: amqp://guest:guest@localhost:5672
    
    - name: Run Kafka integration tests
      run: cargo test kafka_ack_tests --test '*' -- --nocapture
      env:
        KAFKA_BROKERS: localhost:9092
    
    - name: Run MQTT integration tests
      run: cargo test mqtt_ack_tests --test '*' -- --nocapture
      env:
        MQTT_BROKER: localhost:1883

  # Documentation and examples
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-docs-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
    
    - name: Test examples
      run: |
        for example in examples/*/; do
          if [ -f "$example/Cargo.toml" ]; then
            echo "Testing example: $example"
            cd "$example"
            cargo check
            cd - > /dev/null
          fi
        done
    
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  # Release automation
  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [quality, test, security, cross-platform]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release
      run: cargo build --release
    
    - name: Run release tests
      run: cargo test --release
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      working-directory: ./kincir
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          target/release/kincir*
          CHANGELOG.md
        body: |
          ## Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Installation
          
          ```bash
          cargo install kincir
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Nightly performance regression tests
  nightly-performance:
    name: Nightly Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-nightly-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run comprehensive benchmarks
      run: |
        cargo bench --bench backend_comparison
        cargo bench --bench memory_broker
        cargo bench --bench acknowledgment_performance
        cargo bench --bench router_performance
        cargo bench --bench concurrent_operations
    
    - name: Store nightly benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: nightly-benchmark-results-${{ github.run_number }}
        path: target/criterion/
        retention-days: 90
    
    - name: Performance regression check
      run: |
        # This would compare against baseline performance metrics
        # and fail if there's significant regression
        echo "Performance regression check would run here"
        # cargo install cargo-criterion
        # cargo criterion --message-format json > current_results.json
        # python scripts/check_performance_regression.py
